// Generated by CoffeeScript 1.9.3
var exe, exec, handlers, index, merge, options, run, spawn,
  slice = [].slice;

require("source-map-support").install();

exec = require("child_process").exec;

spawn = require('cross-spawn-async');

merge = require("lodash.merge");

options = require("./options");

exe = function(cmd, opts, cb) {
  return exec(cmd, opts, function(err, stdout, stderr) {
    if (stderr) {
      process.stderr.write(stderr);
    }
    if (err !== null) {
      return console.trace(JSON.stringify(err, null, 2));
    } else if (cb != null) {
      return cb(stdout);
    } else {
      return process.stdout.write(stdout);
    }
  });
};

handlers = function(opts) {
  var defaults;
  defaults = {
    stdout: function(data) {
      return process.stdout.write(data);
    },
    stderr: function(data) {
      return process.stderr.write(data);
    },
    error: function(err, context) {
      return console.trace(JSON.stringify(err, null, 2));
    },
    close: function(code, context) {
      if (code !== 0) {
        return console.log("This `" + context.cmd + "` process exited with " + code + ".");
      }
    }
  };
  if (opts != null) {
    return merge({}, defaults, opts);
  } else {
    return defaults;
  }
};

run = function(cmd, opts) {
  var chips, cmdArgs, command, context, handles;
  if (opts == null) {
    opts = {};
  }
  if (typeof cmd !== "string") {
    console.log("Expecting command string, instead got:");
    console.log(cmd);
    throw new Error("Wrong command type: '" + (typeof cmd) + "'.");
  }
  cmdArgs = cmd.split(/\s+/);
  command = cmdArgs.shift();
  handles = handlers(opts.childish);
  context = {
    "cmd": cmd
  };
  chips = spawn(command, cmdArgs, opts);
  chips.stdout.on("data", function(data) {
    return handles.stdout(data);
  });
  chips.stderr.on("data", function(data) {
    return handles.stderr(data);
  });
  chips.on("error", function(err) {
    return handles.error(err, context);
  });
  return chips.on("close", function(code) {
    return handles.close(code, context);
  });
};

index = function() {
  var args, cmd, n;
  cmd = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  n = args.length;
  if (n > 0) {
    if (typeof args[n - 1] === "function") {
      if (n === 1) {
        return exe(cmd, {}, args[0]);
      } else {
        return exe(cmd, args[0], args[n - 1]);
      }
    } else {
      if (args[0].childish != null) {
        args[0].childish = options(args[0].childish);
      }
      return run(cmd, args[0]);
    }
  } else {
    return run(cmd);
  }
};

module.exports = function() {
  var rest, what;
  what = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  if (arguments.length === 1 && typeof what === "object") {
    return function() {
      var args, cmd;
      cmd = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (args.length) {
        if (typeof args[args.length - 1] === "function") {
          return index.apply(null, arguments);
        } else {
          return index.call(null, cmd, merge({}, what, args[0]));
        }
      } else {
        return index.call(null, cmd);
      }
    };
  } else {
    return index.apply(null, arguments);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY29mZmVlIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW5kZXguY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLHNEQUFBO0VBQUE7O0FBQUEsT0FBQSxDQUFRLG9CQUFSLENBQTZCLENBQUMsT0FBOUIsQ0FBQTs7QUFFQSxJQUFBLEdBQU8sT0FBQSxDQUFRLGVBQVIsQ0FBd0IsQ0FBQzs7QUFDaEMsS0FBQSxHQUFRLE9BQUEsQ0FBUSxtQkFBUjs7QUFDUixLQUFBLEdBQVEsT0FBQSxDQUFRLGNBQVI7O0FBQ1IsT0FBQSxHQUFVLE9BQUEsQ0FBUSxXQUFSOztBQUdWLEdBQUEsR0FBTSxTQUFDLEdBQUQsRUFBTSxJQUFOLEVBQVksRUFBWjtTQUNKLElBQUEsQ0FBSyxHQUFMLEVBQVUsSUFBVixFQUFnQixTQUFDLEdBQUQsRUFBTSxNQUFOLEVBQWMsTUFBZDtJQUNkLElBQWdDLE1BQWhDO01BQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFmLENBQXFCLE1BQXJCLEVBQUE7O0lBQ0EsSUFBRyxHQUFBLEtBQVMsSUFBWjthQUNFLE9BQU8sQ0FBQyxLQUFSLENBQWMsSUFBSSxDQUFDLFNBQUwsQ0FBZSxHQUFmLEVBQW9CLElBQXBCLEVBQTBCLENBQTFCLENBQWQsRUFERjtLQUFBLE1BRUssSUFBRyxVQUFIO2FBQ0gsRUFBQSxDQUFHLE1BQUgsRUFERztLQUFBLE1BQUE7YUFHSCxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQWYsQ0FBcUIsTUFBckIsRUFIRzs7RUFKUyxDQUFoQjtBQURJOztBQVdOLFFBQUEsR0FBVyxTQUFDLElBQUQ7QUFDVCxNQUFBO0VBQUEsUUFBQSxHQUNFO0lBQUEsTUFBQSxFQUFRLFNBQUMsSUFBRDthQUFVLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBZixDQUFxQixJQUFyQjtJQUFWLENBQVI7SUFDQSxNQUFBLEVBQVEsU0FBQyxJQUFEO2FBQVUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFmLENBQXFCLElB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U0FBQTtBQUNmLE1BQUE7RUFEZ0IscUJBQU07RUFDdEIsSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUFwQixJQUEwQixPQUFPLElBQVAsS0FBZSxRQUE1QztBQUNFLFdBQU8sU0FBQTtBQUNMLFVBQUE7TUFETSxvQkFBSztNQUNYLElBQUcsSUFBSSxDQUFDLE1BQVI7UUFDRSxJQUFHLE9BQU8sSUFBSyxDQUFBLElBQUksQ0FBQyxNQUFMLEdBQWMsQ0FBZCxDQUFaLEtBQWdDLFVBQW5DO2lCQUlFLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWixFQUFrQixTQUFsQixFQUpGO1NBQUEsTUFBQTtpQkFNRSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsRUFBaUIsR0FBakIsRUFBc0IsS0FBQSxDQUFNLEVBQU4sRUFBVSxJQUFWLEVBQWdCLElBQUssQ0FBQSxDQUFBLENBQXJCLENBQXRCLEVBTkY7U0FERjtPQUFBLE1BQUE7ZUFVRSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsRUFBaUIsR0FBakIsRUFWRjs7SUFESyxFQURUO0dBQUEsTUFBQTtXQWNFLEtBQUssQ0FBQyxLQUFOLENBQVksSUFBWixFQUFrQixTQUFsQixFQWRGOztBQURlIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZShcInNvdXJjZS1tYXAtc3VwcG9ydFwiKS5pbnN0YWxsKClcblxuZXhlYyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpLmV4ZWNcbnNwYXduID0gcmVxdWlyZSgnY3Jvc3Mtc3Bhd24tYXN5bmMnKVxubWVyZ2UgPSByZXF1aXJlKFwibG9kYXNoLm1lcmdlXCIpXG5vcHRpb25zID0gcmVxdWlyZShcIi4vb3B0aW9uc1wiKVxuXG4jIGV4ZWMgI3NpbXBsZVxuZXhlID0gKGNtZCwgb3B0cywgY2IpIC0+XG4gIGV4ZWMgY21kLCBvcHRzLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgLT5cbiAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShzdGRlcnIpIGlmIHN0ZGVyclxuICAgIGlmIGVyciBpc250IG51bGxcbiAgICAgIGNvbnNvbGUudHJhY2UgSlNPTi5zdHJpbmdpZnkoZXJyLCBudWxsLCAyKVxuICAgIGVsc2UgaWYgY2I/XG4gICAgICBjYihzdGRvdXQpXG4gICAgZWxzZVxuICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoc3Rkb3V0KVxuXG4jIGV2ZW50LWhhbmRsZXIgZGVmYXVsdHMgLyBvdmVycmlkZXNcbmhhbmRsZXJzID0gKG9wdHMpIC0+XG4gIGRlZmF1bHRzID1cbiAgICBzdGRvdXQ6IChkYXRhKSAtPiBwcm9jZXNzLnN0ZG91dC53cml0ZShkYXRhKVxuICAgIHN0ZGVycjogKGRhdGEpIC0+IHByb2Nlc3Muc3RkZXJyLndyaXRlKGRhdGEpXG4gICAgZXJyb3I6IChlcnIsIGNvbnRleHQpIC0+IGNvbnNvbGUudHJhY2UgSlNPTi5zdHJpbmdpZnkoZXJyLCBudWxsLCAyKVxuICAgIGNsb3NlOiAoY29kZSwgY29udGV4dCkgLT5cbiAgICAgIHVubGVzcyBjb2RlIGlzIDBcbiAgICAgICAgY29uc29sZS5sb2cgXCJUaGlzIGAje2NvbnRleHQuY21kfWAgcHJvY2VzcyBleGl0ZWQgd2l0aCAje2NvZGV9LlwiXG4gIGlmIG9wdHM/XG4gICAgbWVyZ2Uoe30sIGRlZmF1bHRzLCBvcHRzKVxuICBlbHNlXG4gICAgZGVmYXVsdHNcblxuIyBzcGF3biAjc2ltcGxlXG5ydW4gPSAoY21kLCBvcHRzID0ge30pIC0+XG4gIHVubGVzcyB0eXBlb2YgY21kIGlzIFwic3RyaW5nXCJcbiAgICBjb25zb2xlLmxvZyBcIkV4cGVjdGluZyBjb21tYW5kIHN0cmluZywgaW5zdGVhZCBnb3Q6XCJcbiAgICBjb25zb2xlLmxvZyBjbWRcbiAgICB0aHJvdyBuZXcgRXJyb3IgXCJXcm9uZyBjb21tYW5kIHR5cGU6ICcje3R5cGVvZiBjbWR9Jy5cIlxuICBjbWRBcmdzID0gY21kLnNwbGl0IC9cXHMrL1xuICBjb21tYW5kID0gY21kQXJncy5zaGlmdCgpXG4gIGhhbmRsZXMgPSBoYW5kbGVycyhvcHRzLmNoaWxkaXNoKVxuICBjb250ZXh0ID0gXCJjbWRcIjogY21kXG4gIGNoaXBzID0gc3Bhd24oY29tbWFuZCwgY21kQXJncywgb3B0cylcbiAgY2hpcHMuc3Rkb3V0Lm9uIFwiZGF0YVwiLCAoZGF0YSkgLT4gaGFuZGxlcy5zdGRvdXQoZGF0YSlcbiAgY2hpcHMuc3RkZXJyLm9uIFwiZGF0YVwiLCAoZGF0YSkgLT4gaGFuZGxlcy5zdGRlcnIoZGF0YSlcbiAgY2hpcHMub24gXCJlcnJvclwiLCAoZXJyKSAtPiBoYW5kbGVzLmVycm9yKGVyciwgY29udGV4dClcbiAgY2hpcHMub24gXCJjbG9zZVwiLCAoY29kZSkgLT4gaGFuZGxlcy5jbG9zZShjb2RlLCBjb250ZXh0KVxuXG5pbmRleCA9IChjbWQsIGFyZ3MuLi4pIC0+XG4gIG4gPSBhcmdzLmxlbmd0aFxuICBpZiBuID4gMFxuICAgIGlmIHR5cGVvZiBhcmdzW24gLSAxXSBpcyBcImZ1bmN0aW9uXCJcbiAgICAgIGlmIG4gaXMgMVxuICAgICAgICBleGUgY21kLCB7fSwgYXJnc1swXVxuICAgICAgZWxzZVxuICAgICAgICAjIGV4ZSB0YWtlcyBhdCBtb3N0IDMgYXJndW1lbnRzIChoZXJlIHVzaW5nIHRoZSBmaXJzdCAmIGxhc3Qgb2YgYXJncylcbiAgICAgICAgZXhlIGNtZCwgYXJnc1swXSwgYXJnc1tuIC0gMV1cbiAgICBlbHNlXG4gICAgICAjIHJ1biB0YWtlcyBhdCBtb3N0IDIgYXJndW1lbnRzLCB0aGUgMm5kLCBvcHRpb25zLCBjb3VsZCBjb250YWluIGNoaWxkaXNoXG4gICAgICBpZiBhcmdzWzBdLmNoaWxkaXNoP1xuICAgICAgICBhcmdzWzBdLmNoaWxkaXNoID0gb3B0aW9ucyhhcmdzWzBdLmNoaWxkaXNoKSAjIHNwZWNpYWwgY2hpbGRpc2ggb3B0aW9uc1xuICAgICAgcnVuIGNtZCwgYXJnc1swXVxuICBlbHNlXG4gICAgcnVuIGNtZFxuXG5tb2R1bGUuZXhwb3J0cyA9ICh3aGF0LCByZXN0Li4uKSAtPlxuICBpZiBhcmd1bWVudHMubGVuZ3RoIGlzIDEgYW5kIHR5cGVvZiB3aGF0IGlzIFwib2JqZWN0XCJcbiAgICByZXR1cm4gKGNtZCwgYXJncy4uLikgLT5cbiAgICAgIGlmIGFyZ3MubGVuZ3RoXG4gICAgICAgIGlmIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gaXMgXCJmdW5jdGlvblwiXG4gICAgICAgICAgIyBOT1RFOiBleGVjIGlnbm9yZXMgZGVmYXVsdCBvcHRpb25zIGZvciBub3csXG4gICAgICAgICAgIyBhcyBpdCBkb2Vzbid0IG5lZWQgdGhlbSBsaWtlIHNwYXduIChtb3JlIHVzZWZ1bCBhbmQgZmF2b3JlZCkuXG4gICAgICAgICAgIyBUcmVhdGluZyB0aGlzIGFzIF9ZQUdOSV8sIHRob3VnaCBpdCBtYXkgYmUgZWFzeSB0byBpbXBsZW1lbnQuLi5cbiAgICAgICAgICBpbmRleC5hcHBseSBudWxsLCBhcmd1bWVudHNcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluZGV4LmNhbGwgbnVsbCwgY21kLCBtZXJnZSh7fSwgd2hhdCwgYXJnc1swXSlcbiAgICAgIGVsc2VcbiAgICAgICAgIyBzcGF3biB3aXRoIG5vIG9wdGlvbnMgLSBleGNlcHQgYHdoYXRgLWV2ZXIgZGVmYXVsdHNcbiAgICAgICAgaW5kZXguY2FsbCBudWxsLCBjbWRcbiAgZWxzZVxuICAgIGluZGV4LmFwcGx5IG51bGwsIGFyZ3VtZW50c1xuIl19